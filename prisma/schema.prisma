generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider     = "postgresql"
  url          = env("AWS_POSTGRES_DB_CONNECTION_STRING")
  relationMode = "foreignKeys"
  extensions   = [vector]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  username         String?        @unique
  image            String?
  karma            Int            @default(0)
  joinedDate       DateTime       @default(now())
  bio              String?
  accounts         Account[]
  comments         Comment[]
  commentVotes     CommentVote[]
  createdCommunity Community[]    @relation("CreatedBy")
  posts            Post[]
  sessions         Session[]
  subscription     Subscription[]
  Vote             Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Community {
  id          String              @id @default(cuid())
  name        String              @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  creatorId   String?
  description String?
  visibility  CommunityVisibility @default(PUBLIC)
  image       String?
  creator     User?               @relation("CreatedBy", fields: [creatorId], references: [id])
  posts       Post[]
  members     Subscription[]

  @@index([name])
  @@index([creatorId])
}

model Subscription {
  userId      String
  communityId String
  dateJoined  DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@id([userId, communityId])
  @@index([userId])
  @@index([communityId])
  @@index([dateJoined])
}

model Post {
  id          String         @id @default(cuid())
  title       String         @unique
  content     Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  communityId String
  authorId    String
  visibility  PostVisibility @default(PUBLIC)
  comments    Comment[]
  author      User           @relation(fields: [authorId], references: [id])
  community   Community      @relation(fields: [communityId], references: [id])
  votes       Vote[]

  @@index([communityId])
  @@index([authorId])
}

model Comment {
  id        String        @id @default(cuid())
  text      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  postId    String
  authorId  String
  replyToId String?
  commentId String?
  author    User          @relation(fields: [authorId], references: [id])
  post      Post          @relation(fields: [postId], references: [id])
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]

  @@index([postId])
  @@index([authorId])
  @@index([replyToId])
}

model CommentVote {
  userId    String
  commentId String
  type      VoteType
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Vote {
  userId String
  postId String
  type   VoteType
  post   Post     @relation(fields: [postId], references: [id])
  user   User     @relation(fields: [userId], references: [id])

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Documents {
  id         Int?
  text       String?
  n_tokens   Int?
  embeddings Unsupported("vector")?

  @@ignore
}

model Openai_ft_data {
  id               String    @id @default(cuid())
  query            String?
  answer           String?
  suggested_answer String?
  user_feedback    FeedBack?
}

enum CommunityVisibility {
  PUBLIC
  PRIVATE
  RESTRICTED
}

enum PostVisibility {
  PUBLIC
  PRIVATE
}

enum VoteType {
  UP
  DOWN
}

enum FeedBack {
  UPVOTE
  DOWNVOTE
}
