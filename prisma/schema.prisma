// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//MySQL

// datasource db {
//   provider     = "mysql"// "mysql" 
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// Supabase
datasource db {
 provider     = "postgresql" 
  url          = env("AWS_POSTGRES_DB_CONNECTION_STRING")
  //directUrl = env("DIRECT_URL")
  relationMode = "foreignKeys"
}
// VERCEL
// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//   relationMode = "foreignKeys"
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  accounts      Account[]
  sessions      Session[]

  posts        Post[]
  comments     Comment[]
  commentVotes CommentVote[]

  subscription Subscription[]
  Vote         Vote[]

  createdCommunity Community[] @relation("CreatedBy")
  karma          Int      @default(0)

}
model Community {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId String?
  creator   User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  members   Subscription[]
  description String?
  visibility CommunityVisibility @default(PUBLIC)
  @@index([name])
  @@index([creatorId])
}

enum CommunityVisibility{
  PUBLIC
  PRIVATE
  RESTRICTED
}
model Subscription {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  dateJoined DateTime @default(now())
  
  @@id([userId, communityId])
  @@index([userId]) // for user's Communities
  @@index([communityId]) // for Community's members
  @@index([dateJoined])
}

model Post {
  id        String   @id @default(cuid())
  title     String   @unique
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  community   Community  @relation(fields: [communityId], references: [id])
  communityId String

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  comments Comment[]
  votes    Vote[]
  visibility ContentVisibility @default(PUBLIC)
  @@index([communityId])
  @@index([authorId])
}
enum ContentVisibility {
  PUBLIC
  PRIVATE
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  @@index([postId])
  @@index([authorId])
  @@index([replyToId])
}

enum VoteType {
  UP
  DOWN
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}
